// Generated by CoffeeScript 1.6.1
(function() {
  var Histogram;

  window.Histogram = Histogram = (function() {
    var palette;

    palette = [[202, 100, 41], [209, 100, 26], [13, 100, 53], [48, 100, 56], [93, 70, 36], [344, 100, 25], [206, 100, 76], [75, 88, 13], [70, 100, 41], [273, 56, 28], [34, 100, 53], [357, 100, 39], [337, 92, 46], [141, 95, 46], [357, 0, 60], [357, 0, 15]];

    palette = palette.map(function(color) {
      return d3.hsl(color[0], color[1] / 100, color[2] / 100).toString();
    });

    function Histogram(svg) {
      this.svg = d3.select(svg);
    }

    Histogram.prototype.draw = function(capture, interval) {
      var begin, data, duration, end, intervals, rect, scale_x, scale_y, stream;
      begin = capture.first_packet().timestamp;
      end = capture.last_packet().timestamp;
      duration = end - begin;
      intervals = Math.floor(duration / interval);
      data = d3.layout.stack()(capture.transactions().map(function(transaction) {
        var traffic, x;
        traffic = (function() {
          var _i, _results;
          _results = [];
          for (x = _i = 0; 0 <= intervals ? _i <= intervals : _i >= intervals; x = 0 <= intervals ? ++_i : --_i) {
            _results.push({
              x: x,
              y: 0
            });
          }
          return _results;
        })();
        transaction.packets_in.forEach(function(packet) {
          return traffic[Math.floor((packet.timestamp - begin) / interval)].y += packet.size;
        });
        return traffic;
      }));
      scale_x = d3.scale.linear().range([0, 100]).domain([0, intervals]);
      scale_y = d3.scale.linear().range([0, 90]).domain([
        0, d3.max(data[data.length - 1], function(d) {
          return d.y0 + d.y;
        })
      ]);
      stream = this.svg.selectAll("g.stream").data(data).enter().append("svg:g").attr("class", "stream").style("fill", function(d, i) {
        return palette[i % palette.length];
      });
      return rect = stream.selectAll("rect").data(Object).enter().append("svg:rect").attr("x", function(d) {
        return scale_x(d.x) + '%';
      }).attr("y", function(d) {
        return 100 - scale_y(d.y0 + d.y) + '%';
      }).attr("height", function(d) {
        return scale_y(d.y) + '%';
      }).attr("width", 100 / intervals + '%');
    };

    return Histogram;

  })();

}).call(this);
