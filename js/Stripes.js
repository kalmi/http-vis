// Generated by CoffeeScript 1.6.1
(function() {
  var Stripes, truncate;

  truncate = function(maxlength, str) {
    if (str.length <= maxlength) {
      return str;
    } else {
      return str.substr(0, maxlength - 1) + '...';
    }
  };

  window.Stripes = Stripes = (function() {
    var margin;

    margin = 0.1;

    function Stripes(svg) {
      this.svg = d3.select(svg);
    }

    Stripes.prototype.download = function() {
      var xml;
      xml = this.svg.node().parentNode.innerHTML.replace(/^\s*<!--\s*([\s\S]*)-->\s*<svg/, '$1\n<svg');
      document.location.href = 'data:application/octet-stream;base64,' + btoa(xml);
      return false;
    };

    Stripes.prototype.draw = function(capture, palette, bandwidth) {
      var as, bars, capture_begin, capture_duration, draw_packets, duration, em, packets, scale, streams, svg_dom, transaction_y, transactions, wireshark_begin,
        _this = this;
      packets = capture.packets_in();
      duration = function(packet) {
        return packet.size / bandwidth;
      };
      capture_begin = capture.begin(bandwidth);
      capture_duration = capture.duration(bandwidth);
      wireshark_begin = capture.first_packet().timestamp;
      scale = d3.scale.linear().domain([0, capture.end() - capture_begin]).range(['0%', '100%']);
      draw_packets = function(stripes, y, height) {
        stripes.enter().append('rect').attr('class', 'packet').attr('y', y).attr('height', height).attr('packet-id', function(packet) {
          return packet.id;
        });
        stripes.attr('x', function(packet) {
          return scale(packet.timestamp - duration(packet) - capture_begin);
        }).attr('width', function(packet) {
          return scale(duration(packet));
        }).attr('fill', function(packet) {
          return palette.color(packet.transaction);
        });
        return stripes.exit().remove();
      };
      draw_packets(this.svg.selectAll('rect.packet').data(packets), 0, '100%');
      transactions = capture.transactions().filter(function(t) {
        return (t.request && t.response) || console.error('incomplete transaction:', t);
      });
      streams = capture.streams.filter(function(stream) {
        return stream.transactions.length !== 0;
      });
      transaction_y = function(transaction) {
        return 2 * margin + (1 + 2 * margin) * (streams.indexOf(transaction.stream));
      };
      bars = this.svg.selectAll('a.transaction').data(transactions);
      as = bars.enter().append('a').attr('class', 'transaction').attr('id', function(t, id) {
        return 'transaction-' + id;
      }).attr('xlink:href', function(t, id) {
        return t.request.url;
      });
      as.append('title').text(function(t, i) {
        return ("TCP#" + (streams.indexOf(t.stream)) + " (" + t.stream.domain + ")\n") + ("HTTP#" + t.id + " (" + (truncate(20, t.request.url.substr(t.request.url.lastIndexOf('/') + 1))) + ")\n") + ("begin: " + ((t.request_begin(bandwidth) - wireshark_begin).toFixed(2)) + "s\n") + ("sending: " + (Math.round(t.request_duration(bandwidth) * 1000)) + "ms\n") + ("waiting: " + (Math.round((t.response_begin(bandwidth) - t.request_end()) * 1000)) + "ms\n") + ("receiving: " + (Math.round(t.response_duration(bandwidth) * 1000)) + "ms");
      });
      as.append('rect').attr('class', 'stream').attr('height', '1em');
      as.append('rect').attr('class', 'request').attr('height', '1em');
      bars.each(function(t, id) {
        return draw_packets(d3.select(this).selectAll('rect.packet').data(t.packets_in), transaction_y(t) + 0.1 + 'em', '0.8em');
      });
      bars.select('rect.stream').attr('x', function(t, id) {
        return scale(t.begin(bandwidth) - capture_begin);
      }).attr('y', function(t, id) {
        return transaction_y(t) + 'em';
      }).attr('width', function(t, id) {
        return scale(t.response_end() - t.begin(bandwidth));
      });
      bars.select('rect.request').attr('x', function(t, id) {
        return scale(t.request_begin(bandwidth) - capture_begin);
      }).attr('y', function(t, id) {
        return transaction_y(t) + 'em';
      }).attr('width', function(t, id) {
        return scale(t.response_begin(bandwidth) - t.request_begin(bandwidth));
      });
      bars.exit().remove();
      em = Number(getComputedStyle(bars[0][0], "").fontSize.match(/(\d*(\.\d*)?)px/)[1]);
      this.svg.attr('height', (2 * margin + streams.length * (1 + 2 * margin)) * em + 'px');
      svg_dom = this.svg[0][0];
      svg_dom.onmousemove = function(event) {
        var time;
        time = capture_begin + capture_duration * (event.clientX - svg_dom.offsetLeft) / svg_dom.clientWidth - wireshark_begin;
        return _this.onmousemove(time);
      };
      return svg_dom.onmouseover = function(event) {
        var packet, stream, transaction;
        if (event.target.classList.toString() === 'packet') {
          packet = capture.all_packets[event.target.getAttribute('packet-id')];
          transaction = packet.transaction;
          stream = transaction.stream;
          return _this.onmouseover(stream, transaction, packet);
        } else {
          return _this.onmouseover();
        }
      };
    };

    Stripes.prototype.onmousemove = function(time) {};

    Stripes.prototype.onmouseover = function(stream, transaction, packet) {};

    return Stripes;

  })();

}).call(this);
