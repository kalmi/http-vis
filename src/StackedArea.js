// Generated by CoffeeScript 1.6.1
(function() {
  var StackedArea;

  window.StackedArea = StackedArea = (function() {

    function StackedArea(svg) {
      this.svg = d3.select(svg);
    }

    StackedArea.prototype.draw = function(capture, palette, bandwidth, intervals) {
      var begin, data, duration, end, interval, rect, scale_x, scale_y, stream, transactions;
      begin = capture.begin(bandwidth);
      end = capture.end();
      duration = end - begin;
      interval = duration / intervals;
      transactions = _.sortBy(capture.transactions, function(transaction) {
        return palette.color(transaction);
      });
      data = d3.layout.stack()(transactions.map(function(transaction) {
        var i, interval_begin, interval_data, interval_end, packet, packet_begin, packet_duration, packet_end, packet_interval_duration, _i, _j, _len, _ref, _results;
        _results = [];
        for (i = _i = 0; 0 <= intervals ? _i <= intervals : _i >= intervals; i = 0 <= intervals ? ++_i : --_i) {
          interval_begin = i * interval;
          interval_end = interval_begin + interval;
          interval_data = 0;
          _ref = transaction.packets_in;
          for (_j = 0, _len = _ref.length; _j < _len; _j++) {
            packet = _ref[_j];
            packet_duration = packet.ethernet.byteLength / bandwidth;
            packet_end = packet.timestamp - begin;
            packet_begin = packet_end - packet_duration;
            if (packet_end < interval_begin || packet_begin > interval_end) {
              continue;
            }
            packet_interval_duration = Math.min(packet_end, interval_end) - Math.max(packet_begin, interval_begin);
            interval_data += packet.ethernet.byteLength * packet_interval_duration / packet_duration;
          }
          _results.push({
            x: i,
            y: interval_data
          });
        }
        return _results;
      }));
      scale_x = d3.scale.linear().range([0, 100]).domain([0, intervals]);
      scale_y = d3.scale.linear().range([0, 90]).domain([
        0, d3.max(data[data.length - 1], function(d) {
          return d.y0 + d.y;
        })
      ]);
      stream = this.svg.select('#stackedarea').selectAll("g").data(data);
      stream.enter().append("svg:g");
      stream.attr("class", function(d, i) {
        return "color-" + palette.color(transactions[i]);
      });
      stream.exit().remove();
      rect = stream.selectAll("rect").data(Object);
      rect.enter().append("svg:rect").attr("x", function(d) {
        return scale_x(d.x) + '%';
      }).attr("width", 100 / intervals + '%');
      return rect.attr("y", function(d) {
        return 100 - scale_y(d.y0 + d.y) + '%';
      }).attr("height", function(d) {
        return scale_y(d.y) + '%';
      });
    };

    return StackedArea;

  })();

}).call(this);
