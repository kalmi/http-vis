// Generated by CoffeeScript 1.6.1
(function() {
  var Palette;

  window.Palette = Palette = (function() {
    var monochrome_color, palette;

    palette = [[202, 100, 41], [209, 100, 26], [13, 100, 53], [48, 100, 56], [93, 70, 36], [344, 100, 25], [206, 100, 76], [75, 88, 13], [70, 100, 41], [273, 56, 28], [34, 100, 53], [357, 100, 39], [337, 92, 46], [141, 95, 46]];

    palette = palette.map(function(color) {
      return d3.hsl(color[0], color[1] / 100, color[2] / 100);
    });

    monochrome_color = d3.hsl(0, 0, 0.2);

    Palette.prototype.next_color = function() {
      this.color_id += 1;
      return palette[(this.color_id - 1) % palette.length];
    };

    Palette.prototype.color = function(transaction) {
      if (this.method === 'monochrome') {
        return monochrome_color;
      } else {
        return this.transaction_colors[transaction.id];
      }
    };

    function Palette(capture, method) {
      var color, content_colors, content_type, domain_colors, stream, transaction, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _name, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
      this.method = method;
      this.transaction_colors = {};
      this.color_id = 0;
      switch (this.method) {
        case 'stream':
          _ref = capture.streams;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            stream = _ref[_i];
            color = this.next_color();
            _ref1 = stream.transactions;
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              transaction = _ref1[_j];
              this.transaction_colors[transaction.id] = color;
            }
          }
          break;
        case 'domain':
          domain_colors = {};
          _ref2 = capture.streams;
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            stream = _ref2[_k];
            if ((_ref3 = domain_colors[_name = stream.domain]) == null) {
              domain_colors[_name] = this.next_color();
            }
            color = domain_colors[stream.domain];
            _ref4 = stream.transactions;
            for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
              transaction = _ref4[_l];
              this.transaction_colors[transaction.id] = color;
            }
          }
          break;
        case 'content-type':
          content_colors = {};
          _ref5 = capture.streams;
          for (_m = 0, _len4 = _ref5.length; _m < _len4; _m++) {
            stream = _ref5[_m];
            _ref6 = stream.transactions;
            for (_n = 0, _len5 = _ref6.length; _n < _len5; _n++) {
              transaction = _ref6[_n];
              content_type = (_ref7 = transaction.response) != null ? _ref7.headers['content-type'] : void 0;
              if (content_type != null ? content_type.match(/javascript/) : void 0) {
                content_type = 'javascript';
              }
              if (content_type != null ? content_type.match(/image/) : void 0) {
                content_type = 'image';
              }
              if (content_type != null ? content_type.match(/html/) : void 0) {
                content_type = 'html';
              }
              if ((_ref8 = content_colors[content_type]) == null) {
                content_colors[content_type] = this.next_color();
              }
              color = content_colors[content_type];
              this.transaction_colors[transaction.id] = color;
            }
          }
      }
    }

    return Palette;

  })();

}).call(this);
